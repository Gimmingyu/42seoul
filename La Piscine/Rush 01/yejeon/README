동적할당 관리 함수 목록

#define	MAX_MALLOC_BUF_SIZE 1024

void	*ft_malloc(unsigned int type_size, unsigned int len);
	type_size : 타입의 크기
	len : 배열의 길이
- 동적할당 관리 함수

	void	ft_malloc_init(void *arr, unsigned int size);
		arr : 생성된 배열
		size : 배열의 크기
	- 동적할당 생성 후 데이터를 0으로 초기화

	void	ft_malloc_free(void **buf);
		buf : ft_malloc 내부에서 static으로 선언되어진 동적할당 주소 관리배열
	- ft_malloc() 내부에서 돌아가는 관리되고 있는 모든 동적할당 해제 함수 (실제 호출x)

void	ft_free(void);
- 모든 동적할당 해제 함수

 -----------------------------------------------------------------------

인터페이스 부분

void	ft_noti(const char *msg)
	msg : 출력하고 싶은 문자열
- 단순 출력

int		ft_atoi(char *data)
	data : 숫자로 시작하는 문자열. ' '이나 '\0'으로 구분
- 문자열에서 숫자를 뽑아내 int형으로 변환

char	*ft_itoa(int n)
	n : 정수
- 숫자를 문자열로 변환 (주의! 내부버퍼를 사용하기때문에 다른곳에서 호출하기전에 사용하거나 따로 저장을 해야됨)

int		ft_check_input_cnt(int *data)
	data : 입력값을 int 숫자로 정리한 동적할당 배열포인터
- 정사각형을 만들수있는 충분한 수인지 검사

int		*ft_check_input(int n, char **input)
	n : argc
	input : argv
- 입력값 검증 함수. 성공시 입력값을 int형 배열로 반환. [0]번째에 배열의 크기 저장. ex)10 20 30 일때 [0] == 3

	int		ft_check_input_format(char *data)
		data : argv의 1차원 배열값. 반복문으로 여러줄로 입력된 값 감지
	- 숫자 + 공백만 있는지 검사

	int		*ft_check_input_set_num(int n, char **input)
		n : argc
		input : argv
	- 동적할당으로 int형 배열을 만들고 값 저장

int		ft_strlen(char *str)
	str : 0 종료 문자열
- 문자열 길이 반환

void	ft_print(int **map, int n)
	map : 행열(이름변경 필요)
	n : 행의 길이
- 최종 결과물 출력

void	ft_write_buffer(const char *str, unsigned int len)
	str : 버퍼에 저장될 문자열
	len : 저장하고자 하는 문자열의 수
- 한번에 wirte로 출력 하기위한 임시버퍼 함수 ft_print()에서만 사용

 -----------------------------------------------------------------------

대략적인 모양

int	main(int argc, char *argv[])
{
	int		*p_result_input;

	if (argc < 2)
	{
		ft_noti("need to number\n");
		return (0);
	}
	p_result_input = ft_check_input(argc, argv);	// 입력 검증 성공시 입력값을 int형 배열로 변환해서 반환
	if (p_result_input)
	{
		//ft_init();		// 초기값으로 행렬 초기화
		//ft_run();			// 알고리즘 작동
		//ft_print();		// 결과물 출력
		//ft_destroy();		// 동적할당 해제
	}
	return (0);
}
